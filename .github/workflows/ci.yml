name: ci
on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        config:
        - { os: windows-latest, arch: "x64"    }
        - { os: windows-latest, arch: "Win32"  }
        - { os: macos-12,   arch: "x86_64"     }
        - { os: macos-12,   arch: "arm64"      }
        - { os: ubuntu-latest,  arch: "x86_64" }

    runs-on: ${{ matrix.config.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Deps (Windows Specific)
      if: matrix.config.os == 'windows-latest'
      run: |
        git clone https://github.com/madler/zlib/ -b v1.2.13 --recursive
        cd zlib
        cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.config.arch}} -DCMAKE_BUILD_TYPE=Release
        cmake --build build/ --parallel 4 --config Release
        cmake --install build/ --strip --config Release --prefix ../out/

    - name: Install Deps (MacOS Specific)
      if: matrix.config.os == 'macos-12'
      run: |
        brew list zlib && brew uninstall zlib
        formulaResult=$(brew --cache --bottle-tag=${{ matrix.config.arch }}_monterey zlib)
        brew fetch --force --bottle-tag=${{ matrix.config.arch }}_monterey zlib
        brew install $formulaResult
        brew install ninja

    - name: Install Deps (Linux Specific)
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build cmake zlib1g zlib1g-dev

    - name: Generate Project Files (Windows Specific)
      if: matrix.config.os == 'windows-latest'
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.config.arch }} -DCMAKE_INSTALL_PREFIX=./out/ -DCMAKE_BUILD_TYPE=Release -DPNG_TESTS=OFF -DPNG_SHARED=ON -DPNG_STATIC=ON -DPNG_EXECUTABLES=OFF -DPNG_HARDWARE_OPTIMIZATIONS=ON -DPNG_BUILD_ZLIB=./out/

    - name: Generate Project Files (MacOS Specific)
      if: matrix.config.os == 'macos-12'
      run: |
        cmake -S . -B build -G "Ninja" \
          -DCMAKE_INSTALL_PREFIX=./out/ -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.config.arch }} \
          -DPNG_TESTS=OFF -DPNG_SHARED=ON -DPNG_STATIC=ON \
          -DPNG_EXECUTABLES=OFF -DPNG_HARDWARE_OPTIMIZATIONS=ON

    - name: Generate Project Files (Linux Specific)
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        cmake -S . -B build -G "Ninja" \
          -DCMAKE_INSTALL_PREFIX=./out/ -DCMAKE_BUILD_TYPE=Release \
          -DPNG_TESTS=OFF -DPNG_SHARED=ON -DPNG_STATIC=ON \
          -DPNG_EXECUTABLES=OFF -DPNG_HARDWARE_OPTIMIZATIONS=ON

    - name: Build
      run: |
        cmake --build build/ --parallel 4 --config Release

    - name: Install
      run: |
        cmake --install build/ --strip --config Release

    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.os }}-${{ matrix.config.arch }}
        path: ./out/
        if-no-files-found: error
